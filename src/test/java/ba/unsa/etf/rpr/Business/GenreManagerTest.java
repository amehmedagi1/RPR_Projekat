package ba.unsa.etf.rpr.Business;
import ba.unsa.etf.rpr.Exceptions.GameException;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.GenreDaoSQLImpl;
import ba.unsa.etf.rpr.domain.Genre;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.when;

public class GenreManagerTest {
    private GenreManager genreManager;
    private Genre genre;
    private GenreDaoSQLImpl genreDaoSQLMock;
    private List<Genre> genres;

    @BeforeEach
    public void initializeObjectsWeNeed(){
        genreManager = Mockito.mock(GenreManager.class);
        genre = new Genre();
        genre.setGenreName("MILSIM");
        genre.setId(20);

        genreDaoSQLMock = Mockito.mock(GenreDaoSQLImpl.class);
        genres = new ArrayList<>();
        genres.addAll(Arrays.asList(new Genre("MILSIM"), new Genre("Simulator"), new Genre("Sportske")));
    }

    @Test
    void validateGenreName() throws GameException{
        String correctName = "MILSIM";
        try{
            Mockito.doCallRealMethod().when(genreManager).validateGenreName(correctName);
        }catch (GameException e){
            e.printStackTrace();
            Assertions.assertTrue(false);
        }
        String incorrectNameShort = "A";
        Mockito.doCallRealMethod().when(genreManager).validateGenreName(incorrectNameShort);
        GameException gameException1 = Assertions.assertThrows(GameException.class, ()->{
            genreManager.validateGenreName(incorrectNameShort);}, "Genre must be between 3 and 20 characters long");
        Assertions.assertEquals("Genre must be between 3 and 20 characters long", gameException1.getMessage());

        String incorrectNameLong = RandomStringUtils.randomAlphabetic(50);
        Mockito.doCallRealMethod().when(genreManager).validateGenreName(incorrectNameLong);
        GameException gameException2 = Assertions.assertThrows(GameException.class, ()->{
            genreManager.validateGenreName(incorrectNameLong);}, "Genre must be between 3 and 20 characters long");
        Assertions.assertEquals("Genre must be between 3 and 20 characters long", gameException2.getMessage());
    }

    @Test
    void add() throws GameException{
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::genreDao).thenReturn(genreDaoSQLMock);
        when(DaoFactory.genreDao().getAll()).thenReturn(genres);
        Mockito.doCallRealMethod().when(genreManager).add(genre);
        GameException gameException = Assertions.assertThrows(GameException.class, ()->{
            genreManager.add(genre);}, "\"Genre id must be 0, because it's autogenerated");
        Assertions.assertEquals("Genre id must be 0, because it's autogenerated", gameException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::genreDao);
        Mockito.verify(genreManager).add(genre);
        daoFactoryMockedStatic.close();
    }

    @Test
    void addNewGenre() throws GameException{
        Genre newGenre = new Genre("Novi zanr");
        genreManager.add(newGenre);
        Assertions.assertTrue(true);
        Mockito.verify(genreManager).add(newGenre);
    }

}

